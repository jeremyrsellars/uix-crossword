{"version":3,"sources":["banzai/puzzle/crossword/ui.cljc"],"mappings":";AAaA;;;AAAKA,sCAEMC;AAGX,6CAAA,qDAAAC,lGAAMI,2GAC+CM;AADrD,AAAA,IAAAT,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;UAAA,AAAAE,4CAAAF,eAAA,jEACWI;gBADX,AAAAF,4CAAAF,eAAA,vEACeK;eADf,AAAAH,4CAAAF,eAAA,tEACyBM;cADzB,AAAAJ,4CAAAF,eAAA,rEACkCO;eADlC,AAAAL,4CAAAF,eAAA,tEAC0CQ;AAD1C,AAEE,oBAAU,iBAAAE,mBAAIJ;AAAJ,AAAA,oBAAAI;AAAAA;;AAAA,IAAAA,uBAAaH;AAAb,AAAA,oBAAAG;AAAAA;;AAAqBF;;;;AAA/B;;AAAA,AACE,IAAAG,WAAMP;AAAN,AAAA,QAAAO;KAAA;AAAA,0FAAA,AAAA,yEAC8B,mDAAA,nDAACC,8CAAMH,0FAA4B,EAAA,AAAAI,0BAAA,mFAAA,iGAAA,0FAAA,mFAAA,kGAAA,/cAAQR;;;KADzE;AAAA,0FAAA,AAAA,mEAI2B,0DAAA,sDAAA,uDAAA,qFAAA,mFAAA,wFAAA,vaAACO,qDAAMH;;;KAJlC;AAAA,0FAAA,AAAA,mEAK2B,mDAAA,sDAAA,zGAACG,8CAAMH;;;KALlC;AAAA,0FAAA,AAAA,yEAM8B,mDAAA,qFAAA,mFAAA,qEAAA,wFAAA,xXAACG,8CAAMH;;;KANrC;AAAA,0FAAA,AAAA,yEAO8B,mDAAA,qFAAA,mFAAA,uEAAA,wFAAA,1XAACG,8CAAMH;;;KAPrC;AAAA,0FAAA,AAAA,yEAQ8B,mDAAA,qFAAA,mFAAA,uEAAA,uFAAA,zXAACG,8CAAMH;;;KARrC;AAAA,0FAAA,AAAA,yEAS8B,mDAAA,qFAAA,mFAAA,yEAAA,uFAAA,3XAACG,8CAAMH;;;;AACnC,GAAI,CAAA,QAAM,AAACK,gBAAMV;AAAjB,0FAAA,AAAA,mEACc,0DAAA,uIAAA,qFAAA,mFAAA,uFAAA,hcAACQ,qDAAMH,2DAAY,AAACM,0BAAeX;;AADjD;;;;;;AAGN,yCAAA,zCAAMY,0FACHC;AADH,AAEE,IAAAC,oBAAKD;AAAL,AAAA,oBAAAC;AACc,OAACC,+CAAuBF;;AADtCC","names":["banzai.puzzle.crossword.ui/coord-id","banzai.puzzle.crossword.ui.browser/coord-id","p__21734","map__21735","cljs.core/--destructure-map","cljs.core.get","banzai.puzzle.crossword.ui/keydown-command","key","shift-key","ctrl-key","alt-key","meta-key","data","or__5002__auto__","G__21740","cljs.core.assoc","cljs.core/not","cljs.core/count","clojure.string/upper-case","banzai.puzzle.crossword.ui/focus-coord","coord","and__5000__auto__","banzai.puzzle.crossword.ui.browser/focus-coord"],"sourcesContent":["(ns banzai.puzzle.crossword.ui\n  (:require #?(:clj [clojure.pprint :refer [pprint]]\n               :cljs [cljs.pprint :refer [pprint]])\n            #?(:cljs [banzai.puzzle.crossword.ui.browser :as ui-browser])\n            [clojure.string :as str]))\n\n#?(:clj (defn describe-cw-puzzle [cw-puzzle]\n          (with-out-str\n            (pprint cw-puzzle))))\n#?(:clj (defn describe-cw-state [cw-state]\n          (with-out-str\n            (pprint cw-state))))\n\n(def coord-id\n  \"Returns the cell element id for a coordinate.\"\n  #?(:cljs ui-browser/coord-id\n     :default pr-str))\n\n(defn keydown-command\n  [{:keys [key shift-key ctrl-key alt-key meta-key]} data]\n  (when-not (or ctrl-key alt-key meta-key)\n    (case key\n      \"Tab\"        ['select-coord (assoc data :find-coord/directives (if-not shift-key\n                                                                       [:find-coord/next-word-in-axis :find-coord/next-word]\n                                                                       [:find-coord/prev-word-in-axis :find-coord/prev-word]))]\n      \"Backspace\"  ['set-coord (assoc data :value nil :find-coord/directives [:find-coord/prev-in-word :find-coord/prev])]\n      \"Delete\"     ['set-coord (assoc data :value nil)]\n      \"ArrowUp\"    ['select-coord (assoc data :find-coord/directives [:find-coord/up :find-coord/prev-in-word :find-coord/prev])]\n      \"ArrowLeft\"  ['select-coord (assoc data :find-coord/directives [:find-coord/left :find-coord/prev-in-word :find-coord/prev])]\n      \"ArrowDown\"  ['select-coord (assoc data :find-coord/directives [:find-coord/down :find-coord/next-in-word :find-coord/next])]\n      \"ArrowRight\" ['select-coord (assoc data :find-coord/directives [:find-coord/right :find-coord/next-in-word :find-coord/next])]\n      (if (== 1 (count key))\n        ['set-coord (assoc data :value (str/upper-case key) :find-coord/directives [:find-coord/next-in-word :find-coord/next])]))))\n\n(defn focus-coord\n  [coord]\n  (and coord\n       #?(:cljs (ui-browser/focus-coord coord)\n          :default (prn 'focus-coord/not-implemented))))\n"]}