{"version":3,"sources":["banzai/puzzle/crossword/core.cljc"],"mappings":"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","names":["banzai.puzzle.crossword.core/example-cw-puzzle","banzai.puzzle.crossword.core/nyt-cw-puzzle-2024-04-18","banzai.puzzle.crossword.core/example-cw-state","p__21716","vec__21717","cljs.core.nth","banzai.puzzle.crossword.core/word->coord","r-idx","c-idx","p__21722","vec__21723","banzai.puzzle.crossword.core/word->coords","answer","axis","vec__21726","r*","c*","G__21729","cljs.core/Keyword","js/Error","cljs.core.map_indexed","l-idx","_letter","p__21730","vec__21731","banzai.puzzle.crossword.core/word->row-index","_c-idx","_answer","_axis","p__21736","vec__21737","banzai.puzzle.crossword.core/word->col-index","_r-idx","p__21741","vec__21742","banzai.puzzle.crossword.core/word->answer","p__21745","vec__21746","banzai.puzzle.crossword.core/word->axis","js/banzai","js/banzai.puzzle","js/banzai.puzzle.crossword","js/banzai.puzzle.crossword.core","js/banzai.puzzle.crossword.core.mutate","method-table__5599__auto__","cljs.core.atom","prefer-table__5600__auto__","method-cache__5601__auto__","cached-hierarchy__5602__auto__","hierarchy__5603__auto__","cljs.core.get","fexpr__21750","cljs.core/MultiFn","cljs.core.symbol","banzai.puzzle.crossword.core/mutate","p__21751","p__21752","map__21753","cljs.core/--destructure-map","vec__21754","puzzle","state","op","_cmd","p__21757","vec__21758","_puz-st","msg-parts","cljs.core.apply","js/console.warn","p__21761","p__21762","map__21763","map__21764","banzai.puzzle.crossword.core/update-axis","selected-coord","st","cells","_puzzle","axises-at-coord","cljs.core.into","cljs.core.map","cljs.core.get_in","G__21765","cljs.core/contains?","cljs.core.assoc","cljs.core/first","cljs.core/seq","p__21767","p__21768","map__21769","map__21770","banzai.puzzle.crossword.core/update-selected-word","word","p1__21766#","cljs.core/some","and__5000__auto__","cljs.core._EQ_","p__21771","vec__21772","map__21775","coord","p__21776","map__21777","G__21778","cljs.core.dissoc","p__21780","p__21781","map__21782","vec__21783","map__21786","_op","p1__21779#","cljs.core.update","or__5002__auto__","cljs.core.pr_str","p__21787","p__21788","map__21789","vec__21790","map__21793","value","data","cljs.core/select-keys","cljs.core/assoc-in","p__21795","vec__21796","map__21799","p1__21794#","fexpr__21800","p__21801","map__21802","banzai.puzzle.crossword.core/find-words-in-rows","row-count","rows","cljs.core/deref","words","cljs.core/volatile!","seq__21803","chunk__21804","count__21805","i__21806","temp__5804__auto__","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/next","cljs.core.range","ss","cljs.core/re-seq","word-or-spaces","cljs.core.conj","p__21807","map__21808","banzai.puzzle.crossword.core/invert-puzzle-puzzle-light","col-count","cw-puzzle","cljs.core.mapv","cljs.core/str","cljs.core/nth","cljs.core.repeat","banzai.puzzle.crossword.core/find-words-in-cols","inverted","inverted-words","iter__5480__auto__","s__21810","cljs.core/LazySeq","c__5478__auto__","size__5479__auto__","b__21812","cljs.core/chunk-buffer","i__21811","vec__21813","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__21809","vec__21816","cljs.core/cons","cljs.core/rest","p__21819","p__21820","map__21821","vec__21822","banzai.puzzle.crossword.core/cell-idx","_cw-puzzle","col-idx","banzai.puzzle.crossword.core/assoc-cells","coords","cljs.core.sequence","cljs.core.comp","cljs.core.distinct","sorted-coords","cljs.core.sort_by","cljs.core.partial","words-at-coord","cljs.core/group-by","first-letter-cells","cljs.core/sorted-map","cljs.core/zipmap","idx","G__21825","G__21826","cljs.core/reduce-kv","p__21827","p__21828","vec__21829","map__21832","cljs.core.reduce","vec__21833","G__21836","p__21837","vec__21838","letter","cljs.core.update_in","cljs.core/conj","cljs.core/vector","banzai.puzzle.crossword.core/assoc-words","cljs.core.concat","p__21841","map__21842","banzai.puzzle.crossword.core/comprehend-puzzle","puzzle-string","short-rows","width","cljs.core/max","s","spaces","cljs.core.subs","comprehended","cljs.core.merge","p__21843","map__21844","banzai.puzzle.crossword.core/all-cells","cw-state","s__21846","xs__6360__auto__","iterys__5476__auto__","s__21848","b__21850","i__21849","iter__21847","fs__5477__auto__","iter__21845","cell","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","banzai.puzzle.crossword.core/find-coord","p__21860","map__21861","seq21856","G__21857","G__21858","G__21859","self__5711__auto__","directives","vec__21862","vec__21865","seq__21866","first__21867","vec__21868","before","_","curr-entry","after","cljs.core/split-with","p__21876","vec__21877","_coord","cljs.core.not_EQ_","cljs.core.remove","p__21871","vec__21872","map__21875","locked","curr-word","cljs.core/Delay","p1__21851#","editable-coord","G__21880","G__21884","vec__21885","seq__21886","first__21887","vec__21888","seq__21889","first__21890","directive","cljs.core/not","pred__21891","expr__21892","cljs.core/=","cljs.core/last","cljs.core/dec","cljs.core/inc","n-coord","cljs.core/compare","cljs.core/reverse","p__21894","vec__21895","map__21898","cell-num","p1__21852#","p__21899","vec__21900","map__21903","p1__21853#","p__21904","vec__21905","map__21908","p__21909","vec__21910","map__21913","p__21914","vec__21915","map__21918","current-value","clojure.string/blank?","p1__21854#","p__21919","vec__21920","map__21923","p1__21855#","p__21924","vec__21925","map__21928"],"sourcesContent":["(ns banzai.puzzle.crossword.core\n  (:require [clojure.string :as string]))\n            ;; [hashp.core]))\n\n(declare find-coord)\n\n(def example-cw-puzzle\n  {:crossword/puzzle-string\n   \"#  TEACH\n    #    N\n    #    STUDY\n    #    W  O\n    # G  E  N\n    # LEARN E\n    # U\n    #TEST WORD\n    #   A O\n    #   P R\n    #  DESK\"\n   :crossword/clues\n   {\"TEACH\"  \"Instruct a student\"\n    \"ANSWER\" \"Response to a question\"\n    \"STUDY\"  \"Learn from a resource (e.g. book)\"\n    \"GLUE\"   \"Used to stick one piece of paper to another\"\n    \"LEARN\"  \"Acquire knowledge\"\n    \"TEST\"   \"A graded set of questions for students\"\n    \"TAPE\"   \"Sticky strips often coming in rolls\"\n    \"WORK\"   \"Getting stuff done\"\n    \"WORD\"   \"A part of a sentence.\"\n    \"DESK\"   \"A place to hold your school books and paper while you work.\"\n    \"DONE\"   \"Complete\"}})\n\n(def nyt-cw-puzzle-2024-04-18\n  {:crossword/puzzle-string\n   \"#BANJO\n    #ALOUD\n    #GENIE\n    #EXECS\n    #LATE\"\n   :crossword/clues\n   {\"BANJO\"  \"Bluegrass instrument\"\n    \"ALOUD\"  \"Audible way to think\"\n    \"GENIE\"  \"Aladdin character whose first line is 'Oy! 10,000 years will give you such a crick in the neck`'\"\n    \"EXECS\"  \"Members of a company's C-suite\"\n    \"LATE\"   \"Behind schedule\"\n    \"BAGEL\"   \"The schmear goes here\"\n    \"ALEXA\"   \"Amazon's assistant\"\n    \"NONET\"   \"Group of nine\"\n    \"JUICE\"   \"Batter life, informally\"\n    \"ODES\"   \"Poems like 'to Autumn' and 'To a Skylark'\"}})\n\n(def example-cw-state\n  {:current {#_#_[0 5] \"A\"}\n   :axis :across\n   :selected-cell [0 0]})\n\n(defn word->coord\n  \"Gets the starting coordinate from a word.\"\n  [[r-idx c-idx]]\n  [r-idx c-idx])\n\n(defn word->coords\n  \"Gets the coordinates of a word.\"\n  [[r-idx c-idx answer axis]]\n  (let [[r* c*] (case axis :across [0 1] :down [1 0])]\n    (map-indexed\n      (fn r-letter [l-idx _letter]\n        [(+ r-idx (* r* l-idx))\n         (+ c-idx (* c* l-idx))])\n      answer)))\n\n(defn word->row-index [[r-idx _c-idx _answer _axis]] r-idx)\n(defn word->col-index [[_r-idx c-idx _answer _axis]] c-idx)\n(defn word->answer    [[_r-idx _c-idx answer _axis]] answer)\n(defn word->axis      [[_r-idx _c-idx _answer axis]] axis)\n\n\n(defmulti mutate\n  \"Given `{:puzzle {...}, :state {...}} [op arg1...]`\n   dispatches on op,\n   optionally returning a state-mutation with `:update-state` (an arity-1 fn of old-state to new-state),\n   optionally returning a result with `:result`\n\n   ```clojure\n   {;:server/effect (fn [](prn 'hi))\n    ;:client/effect (fn [](js/console.log 42))\n    :update-state (fn [st](assoc st :x 42))\n    :result 42}\n   ```\"\n  (fn mutate_dispatch [{:keys [puzzle state]} [op :as _cmd]]op))\n\n(defmethod mutate :default\n  [_puz-st [op :as _cmd]]\n  (let [msg-parts [\"Warning:\" \"operation isn't supported:\" op]]\n    #?(:cljs (apply js/console.warn msg-parts)\n       :default (binding [*out* *err*](apply println msg-parts)))))\n\n(defn update-axis\n  [{:keys [selected-coord axis] :as st} {:keys [cells] :as _puzzle}]\n  (let [axises-at-coord (into #{} (map word->axis) (get-in cells [selected-coord :words]))]\n    (cond-> st\n        (not (contains? axises-at-coord axis)) (assoc :axis (first (seq axises-at-coord))))))\n\n(defn update-selected-word\n  [{:keys [selected-coord axis] :as st} {:keys [cells] :as _puzzle}]\n  (let [word (some #(and (= axis (word->axis %)) %)\n                   (get-in cells [selected-coord :words]))]\n    (assoc st :selected-word word)))\n\n(defmethod mutate 'deselect-coord deselect-coord\n  [_puz-st [op {:keys [coord]}]]\n  {:update-state (fn update-st [{:keys [selected-coord] :as st}]\n                   (cond-> st\n                     (= coord selected-coord) (dissoc :selected-coord)))})\n\n(defmethod mutate 'select-coord select-coord\n  [{:keys [puzzle]} [_op {:keys [coord axis]}]]\n  {:update-state (fn update-st [st]\n                   (-> st\n                       (assoc :selected-coord coord)\n                       (update :axis #(or axis %))\n                       (update-axis puzzle)\n                       (update-selected-word puzzle)))\n   :result (pr-str \"selecting\" coord)})\n\n(defmethod mutate 'set-coord set-coord\n  [{:keys [puzzle]} [_op {:keys [coord value] :as data}]]\n  (-> (select-keys data [:client/effect])\n      (assoc :update-state (fn update-st [st]\n                             (-> st\n                                 (assoc-in [:current coord] value)))\n                                ;;  (update-axis puzzle)))\n             :result (pr-str \"set\" coord \"to\" value))))\n\n(defmethod mutate 'set-axis set-axis\n  [_puz-st [op {:keys [axis] :as data}]]\n  (-> (select-keys data [:client/effect])\n    (assoc :update-state (fn update-st [st]\n                           (update st :current-axis #(or axis ({:across :down, :down :across} % :across)))))))\n\n(defn- find-words-in-rows\n  [{:keys [row-count rows]}]\n  ; to-do: consider using recursion instead of volatile!\n  (let [words (volatile! [])] ; seq of [r-idx c-idx answer axis]\n    (doseq [r-idx (range 0 row-count)]\n      (loop [c-idx 0\n             ss (re-seq #\"\\S+|\\s+\" (nth rows r-idx))]\n        (when-let [word-or-spaces (first ss)]\n          (when (re-seq #\"^\\S\\S\" word-or-spaces)\n            (vswap! words conj [r-idx c-idx word-or-spaces :across]))\n          (recur\n            (+ c-idx (count word-or-spaces))\n            (next ss)))))\n    @words))\n\n(defn- invert-puzzle-puzzle-light\n  \"Given a normalized puzzle (all row strings of the appropiate length),\n   inverts the rows and columns.\n   Only inverts `:row-count, :col-count, :rows`\n   other dependent fields may need to be inverted as well.\"\n  [{:keys [row-count col-count rows] :as cw-puzzle}]\n  (-> cw-puzzle\n    (assoc :row-count col-count\n      :col-count row-count\n      :rows (mapv (fn restring [c-idx]\n                    (apply str (map nth rows (repeat c-idx))))\n              (range col-count)))))\n\n(defn- find-words-in-cols\n  [cw-puzzle]\n  (let [inverted (invert-puzzle-puzzle-light cw-puzzle)\n        inverted-words (find-words-in-rows inverted)]\n    (for [[c-idx r-idx word] inverted-words]\n      [r-idx c-idx word :down])))\n\n(defn- cell-idx\n  [{:keys [col-count] :as _cw-puzzle}\n   [r-idx col-idx]]\n  (+ (* r-idx col-count) col-idx))\n\n(defn- assoc-cells\n  [cw-puzzle]\n  (assoc cw-puzzle\n    :cells (let [coords (sequence (comp\n                                    (map word->coord)\n                                    (distinct))\n                                  (:words cw-puzzle))\n                 sorted-coords (sort-by (partial cell-idx cw-puzzle) coords)\n                 words-at-coord (group-by word->coord (:words cw-puzzle))\n                 first-letter-cells (into (sorted-map)\n                                      (zipmap\n                                        sorted-coords\n                                        (map-indexed (fn [idx coord]\n                                                       {:cell-num (inc idx)\n                                                        :words    (into #{} (words-at-coord coord []))})\n                                          sorted-coords)))]\n             (reduce-kv\n               (fn r-words [cells [r-idx c-idx] {:keys [words]}]\n                 (reduce\n                   (fn r-word [cells word]\n                     (let [[r* c*] (case (word->axis word) :across [0 1] :down [1 0])]\n                       (reduce\n                         (fn r-letter [cells [l-idx letter]]\n                           (let [coord [(+ r-idx (* r* l-idx))\n                                        (+ c-idx (* c* l-idx))]]\n                             (-> cells\n                               (assoc-in [coord :correct-letter] (str letter))\n                               (update-in [coord :words] conj word))))\n                         cells\n                         (map-indexed vector (word->answer word)))))\n                   cells\n                   (seq words)))\n               first-letter-cells\n               first-letter-cells))))\n\n(defn- assoc-words\n  [cw-puzzle]\n  (as-> cw-puzzle cw-puzzle\n    (assoc cw-puzzle\n      :words-in-rows (find-words-in-rows cw-puzzle)\n      :words-in-cols (find-words-in-cols cw-puzzle))\n    (assoc cw-puzzle :words (concat (:words-in-rows cw-puzzle) (:words-in-cols cw-puzzle)))\n    (assoc-cells cw-puzzle)))\n\n(defn comprehend-puzzle\n  [{:crossword/keys [puzzle-string] :as cw-puzzle}]\n  (assert (string? puzzle-string))\n  (let [short-rows (re-seq #\"(?<=#).*\" puzzle-string)\n        width (apply max 0 (map count short-rows))\n        rows (mapv (fn fill-row-w-extra-spaces [s spaces]\n                     (subs (str s spaces) 0 width))\n               short-rows\n               (repeat (apply str (repeat width \" \"))))\n        comprehended (->\n                       {:rows      rows\n                        :col-count width\n                        :row-count (count rows)}\n                       (merge cw-puzzle)\n                       assoc-words)]\n    comprehended))\n\n(defn all-cells\n  [{:keys [col-count row-count cells] :as _cw-puzzle}\n   cw-state]\n  (for [r-idx (range row-count)\n        c-idx (range col-count)]\n    (let [coord [r-idx c-idx]\n          cell (get cells coord {:locked true})]\n      [coord\n       (assoc cell\n         :current-value (get-in cw-state [:current coord]))])))\n\n(defn find-coord\n  [cw-puzzle\n   {:keys [axis] :as cw-state}\n   coord\n   & directives]\n  (let [[before [[_ curr-entry] & after]]\n        (->> (all-cells cw-puzzle cw-state)\n             (split-with (fn sw-not-equal [[_coord]](not= _coord coord)))\n             (remove (fn r-locked [[_coord {:keys [locked]}]] locked)))\n        curr-word (delay (->> curr-entry :words (some #(and (= axis (word->axis %)) %))))\n        editable-coord (fn editable-coord [coord](some-> cw-puzzle :cells (get coord) :words (and coord)))]\n    (loop [[directive & directives] (seq directives)]\n      (if-not directive\n        coord\n        (or\n         (condp = directive\n           :find-coord/current coord\n           :find-coord/prev (first (last before))\n           :find-coord/next (first (first after))\n           :find-coord/left (editable-coord (update coord 1 dec))\n           :find-coord/right (editable-coord (update coord 1 inc))\n           :find-coord/up (editable-coord (update coord 0 dec))\n           :find-coord/down (editable-coord (update coord 0 inc))\n           :find-coord/prev-in-word\n           (->> (some (fn prev-in-word [n-coord]\n                        (and (neg? (compare n-coord coord)) n-coord))\n                      (reverse (word->coords @curr-word))))\n           :find-coord/next-in-word\n           (->> (some (fn next-in-word [n-coord]\n                        (and (pos? (compare n-coord coord)) n-coord))\n                      (word->coords @curr-word)))\n           :find-coord/prev-word-in-axis\n           (->> (concat (reverse before))\n                (some (fn f-nxt-empty [[n-coord {:keys [words cell-num]}]]\n                        (and cell-num\n                             (some #(= axis (word->axis %)) words)\n                             n-coord))))\n           :find-coord/next-word-in-axis\n           (->> (concat after before)\n                (some (fn f-nxt-empty [[n-coord {:keys [words cell-num]}]]\n                        (and cell-num\n                             (some #(= axis (word->axis %)) words)\n                             n-coord))))\n           :find-coord/prev-word\n           (->> (concat (reverse before))\n                (some (fn f-nxt-empty [[n-coord {:keys [cell-num]}]]\n                        (and cell-num n-coord))))\n           :find-coord/next-word\n           (->> (concat after before)\n                (some (fn f-nxt-empty [[n-coord {:keys [cell-num]}]]\n                        (and cell-num n-coord))))\n           :find-coord/next-empty-start-in-axis\n           (->> (concat after before)\n                (some (fn f-nxt-empty [[n-coord {:keys [words current-value cell-num]}]]\n                        (and cell-num\n                             (string/blank? current-value)\n                             (some #(= axis (word->axis %)) words)\n                             n-coord))))\n           :find-coord/next-empty-in-axis\n           (->> (concat after before)\n                (some (fn f-nxt-empty [[n-coord {:keys [words current-value]}]]\n                        (and (string/blank? current-value)\n                             (some #(= axis (word->axis %)) words)\n                             n-coord))))\n           :find-coord/next-empty\n           (->> (concat after before)\n                (some (fn f-nxt-empty [[n-coord {:keys [words current-value]}]]\n                        (and (string/blank? current-value) words n-coord)))))\n         (recur directives))))))\n"]}